<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <RemoteCourse>
          <option name="additionalMaterialsUpdateDate" value="0" />
          <option name="authors">
            <list>
              <StepikUserInfo>
                <option name="firstName" value="JetBrains" />
                <option name="guest" value="false" />
                <option name="id" value="17813950" />
                <option name="lastName" value="" />
              </StepikUserInfo>
            </list>
          </option>
          <option name="compatible" value="false" />
          <option name="courseMode" value="Study" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="This is an introductory course to Java. Join the course to get the basic information about the language, to learn about variables and types, and write your very first Java program." />
          <option name="fromZip" value="false" />
          <option name="id" value="6858" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="17813950" />
            </list>
          </option>
          <option name="language" value="JAVA" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="Java. Introduction" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list>
              <option value="13463" />
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm JAVA" />
          <option name="updateDate" value="1540311715000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77857" />
                <option name="index" value="1" />
                <option name="name" value="Intro" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1522252637000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;&#10;    Getting started with the course&#10;&lt;/h1&gt;&#10;&lt;p&gt;&#10;    This is an introductory course to Java. The course covers the basic concepts used to get going with the language.&#10;    Each lesson may include theory, quizzes, and programming practice assignments. Read all the theory, check your&#10;    understanding answering the quiz questions and practice with programming assignments.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;&#10;        Note:&#10;    &lt;/strong&gt;&#10;    If you like learning the theory lessons on Stepik but prefer to do the coding exercises on IntelliJ IDEA - you don't&#10;    need to worry about losing your course progress. All your progress is synchronized between the platforms. Follow&#10;    &lt;strong&gt;&#10;        IDE tips &amp;amp; tricks&#10;    &lt;/strong&gt;&#10;    section helping you to be more productive while learning with IntelliJ IDEA.&#10;&lt;/p&gt;&#10;&#10;    &lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;    &lt;p&gt;When you open your course, you will see the main tool windows used to get around: Project View, Editor, Task&#10;        Description.&lt;/p&gt;&#10;    &lt;h3&gt;Project View&lt;/h3&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6wgX9Qh.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;    &lt;p&gt;Project View shows the course syllabus: list of lessons with lesson steps, or tasks. To navigate to a task, click&#10;        on&#10;        its name.&lt;/p&gt;&#10;    &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;You can hide the Project View window by clicking on the Project tool button or with the&#10;        ⌘1 shortcut. This will give you more space for&#10;        code&#10;        and&#10;        the task description. Click the Project tool button (or&#10;        invoke ⌘1) once again to show the hidden Project&#10;        View.&lt;/p&gt;&#10;    &lt;h3&gt;Task Description&lt;/h3&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/vD2jxwu.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;    &lt;p&gt;The Task Description window gives you all the information you need to complete a task:&lt;/p&gt;&#10;    &lt;ul&gt;&#10;        &lt;li&gt;Learning and reading materials for theory tasks&lt;/li&gt;&#10;        &lt;li&gt;Question and variants of the answers to the quizzes&lt;/li&gt;&#10;        &lt;li&gt;Problem descriptions for programming assignments&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &lt;p&gt;Use Task Description icons for the following actions:&lt;/p&gt;&#10;    &lt;ul&gt;&#10;        &lt;li&gt;&lt;img src=&quot;https://i.imgur.com/c4WahYK.png&quot; height=&quot;20&quot;&gt;&#10;             – to check if a task assignment is done&#10;            right for the quizzes and programming tasks (⌥⌘⏎)&#10;        &lt;/li&gt;&#10;        &lt;li&gt;&lt;img src=&quot;https://i.imgur.com/DIOwj3t.png&quot; height=&quot;20&quot;&gt;&#10;             – to run code from the editor for the&#10;            theory tasks (⌥⌘⏎)&#10;        &lt;/li&gt;&#10;        &lt;li&gt;&lt;img src=&quot;https://i.imgur.com/vcEfyQC.png&quot; height=&quot;20&quot;&gt;&#10;             – to go to the previous/next task (⌘,/⌘.)&#10;        &lt;/li&gt;&#10;        &lt;li&gt;&lt;img src=&quot;https://i.imgur.com/H3vlDyy.png&quot; height=&quot;20&quot;&gt;&#10;             – to drop all the task changes and&#10;            start it anew (⇧⌘X)&#10;        &lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &lt;p&gt;Task Description needs to be visible, to hide it completely is not advised. But still, you can make it a bit less&#10;        distracting by moving it out of the way.&lt;/p&gt;&#10;    &lt;p&gt;If you work with two monitors, one of the best options is to switch the Task Description panel to the floating&#10;        mode&#10;        and move it to the second monitor or just place it near the main IDE window. You can do so with the help of&#10;        special&#10;        tool window settings icon &lt;img src=&quot;https://i.imgur.com/aSQFZGc.png&quot; height=&quot;20&quot;&gt;:&lt;/p&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/A5QGkp1.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;    &lt;p&gt;Or if you prefer you can move the panel to the left, or to the bottom:&lt;/p&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DoSsjMa.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;    &lt;h3&gt;&#10;        Editor&#10;    &lt;/h3&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/670dxIT.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;    &lt;p&gt;&#10;        The Editor is your playground and where you will mainly be programming. You can experiment here for the theory&#10;        tasks&#10;        and quizzes without being checked. For programming assignments in the Editor you will find the code you need to&#10;        fix,&#10;        or you will write your own code from scratch. This code will be checked.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;        You can always run your code with the icon on the left gutter &lt;img src=&quot;https://i.imgur.com/DIOwj3t.png&quot; height=&quot;20&quot;&gt;.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;&#10;            Note:&#10;        &lt;/strong&gt;&#10;        If you want to easily go back to the Editor and focus on your code, the Hide All Windows command (⇧⌘F12)&#10;        is the best option. Just invoke it once again to get all the windows back.&#10;    &lt;/p&gt;&#10;    &lt;h3&gt;&#10;        Use keyboard shortcuts&#10;    &lt;/h3&gt;&#10;    &lt;p&gt;&#10;        We encourage you to use the keyboard shortcuts, as they can significantly speed up your coding and even&#10;        &lt;a href=&quot;http://rsiinfo.org/rsi-computers/keyboard-shortcuts/&quot;&gt;&#10;            reduce the risks of Repetitive Strain Injury&lt;/a&gt;. IntelliJ IDEA is a keyboard-centric IDE. You can choose&#10;        one of&#10;        the pre-configured shortcut schemes, or a keymap,&#10;        in Preferences | Keymap:&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/k0BaxOb.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;    &lt;p&gt;&#10;        You can always take a closer look at the list of actions and corresponding shortcuts available with the help of&#10;        search:&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/QQKLPVU.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;    &lt;p&gt;&#10;        Or, you can search an action by shortcut:&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nKJFT5J.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;    &lt;p&gt;&#10;        &lt;br&gt;&#10;        You can also&#10;        &lt;a href=&quot;https://www.jetbrains.com/help/idea/configuring-keyboard-shortcuts.html&quot;&gt;&#10;            set up your own keymap&lt;/a&gt; if you need a customizable list of shortcuts.&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please note, that we use the default Mac OS scheme (Mac OS X 10.5+) in this course. If you use the default&#10;        keymap of your OS and want a nice looking cheat sheet to print out, go to Help | Keymap Reference to get it.&lt;/p&gt;&#10;    &lt;h3&gt;&#10;        Go to the dark side&#10;    &lt;/h3&gt;&#10;    &lt;p&gt;&#10;        IntelliJ IDEA initially uses the default light color scheme, but you can always switch to the dark Darcula&#10;        scheme.&#10;        Please go to Preferences | Appearance &amp;amp; Behaviour | Appearance and choose Darcula as Theme under UI Options&#10;        section:&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/D7jBPCA.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;&#10;            Note:&#10;        &lt;/strong&gt;&#10;        You can use ⌃` shortcut to quickly switch between color&#10;        schemes and keymaps.&#10;    &lt;/p&gt;&#10;    &lt;h3&gt;&#10;        Find any action with ease&#10;    &lt;/h3&gt;&#10;    &lt;p&gt;&#10;        It is very hard to remember all the shortcuts and all the actions and productivity boosters IntelliJ IDEA has.&#10;        But&#10;        don’t worry about that. All you need to remember is the one action that rules them all, Help | Find Action&#10;        command (⇧⌘A). Just start typing the action you need, and get&#10;        the list:&#10;    &lt;/p&gt;&#10;    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/o7CIDOJ.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294196" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522182187000" />
                    </TheoryTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;What is Java?&lt;/h1&gt;&#10;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt; is a general-purpose object-oriented programming language originally developed by Sun&#10;    Microsystems (which has since been acquired by Oracle Corporation). It declares the principle &lt;strong&gt;&quot;write once,&#10;        run anywhere&quot; (WORA)&lt;/strong&gt; meaning a Java application can be executed on any platform where a Java Virtual&#10;    Machine (JVM) is installed.&lt;/p&gt;&#10;&lt;p&gt;Java has been one of the most popular programming languages for many years. According to the TIOBE index, it is in&#10;    the first position: &lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot;&gt;https://www.tiobe.com/tiobe-index/&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;The applicability of the language allows developers to write large client-server web applications, modern desktop and&#10;    mobile applications, useful frameworks, and libraries.&lt;/p&gt;&#10;&lt;h2&gt;&lt;strong&gt;Short history&lt;/strong&gt;&lt;/h2&gt;&#10;&lt;p&gt;The Java language project was initiated in 1991 by James Gosling and others. In the beginning, the language was&#10;    called &quot;Oak&quot;.&lt;/p&gt;&#10;&lt;p&gt;Sun Microsystems released the Java 1.0 in 1995.&lt;/p&gt;&#10;&lt;p&gt;In 2014 Java 8 was released. This version introduced partial support for functional programming and some other&#10;    updates.&lt;/p&gt;&#10;&lt;p&gt;To date, the latest version is Java 9. The first stable release of Java 9 was on September 21, 2017.&lt;/p&gt;&#10;&lt;h2&gt;&lt;strong&gt;Some important features of Java&lt;/strong&gt;&lt;/h2&gt;&#10;&lt;p&gt;Let's consider several important features of Java.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Platform independence&lt;/strong&gt;: The compiler converts the source code to bytecode, and, then, the Java&#10;    Virtual Machine (JVM) executes the bytecode. Each operating system has a different JVM, but every JVM can execute&#10;    the bytecode, therefore, it works on Windows, Linux, Mac OS and other platforms. So, a program that is written and&#10;    compiled on one platform can run on another platform. It makes the Java platform completely independent.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Simple and clear syntax&lt;/strong&gt;: Java has syntax like C/C++ and C#. Many syntax elements of the language are&#10;    readable and widely used in programming.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Multi-paradigm&lt;/strong&gt;: Java is primarily an object-oriented and imperative programming language where&#10;    almost everything is an object of a class (type). We can consider a typical Java program as a set of interacting&#10;    objects. The objects can represent entities from the real world or some kind of programming abstractions. When we&#10;    write a program, we explain how the objects should interact with each others.&lt;/p&gt;&#10;&lt;p&gt;Actually, Java also supports multiple modern programming paradigms including generic programming, concurrent&#10;    programming, functional programming (partially supported) and others.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Garbage collector&lt;/strong&gt;: It performs automatic memory cleaning of unused objects at runtime.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Built-in multithreading&lt;/strong&gt;: Java supports multithreading at the language and the standard library&#10;    levels. It allows concurrent and parallel execution of several parts of a Java program.&lt;/p&gt;&#10;&lt;p&gt;For more features see here: &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/getStarted/intro/definition.html&quot;&gt;https://docs.oracle.com/javase/tutorial/getStarted/intro/definition.html&lt;/a&gt;&#10;&lt;/p&gt;&#10;&lt;h2&gt;&lt;strong&gt;Programming and running processes&lt;/strong&gt;&lt;/h2&gt;&#10;&lt;p&gt;You will write source code in plain-text files with a &lt;em&gt;.java&lt;/em&gt; extension. The files will be compiled into &lt;em&gt;.class&lt;/em&gt;&#10;    files (bytecode) by the &lt;em&gt;javac&lt;/em&gt; compiler. To run an application you will use the &lt;em&gt;java tool&lt;/em&gt;. The tool&#10;    can start a &lt;em&gt;.class&lt;/em&gt; file with the main method and even whole JAR with multiple classes.&lt;/p&gt;&#10;&lt;p&gt;Also, it's possible to write bytecode directly but this is not considered in the topic.&lt;/p&gt;&#10;&lt;p&gt;The following picture shows the very simplified process of writing and running programs using Java:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/MEcMRiq.png&quot; width=&quot;291&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;A Java developer writes a program in a text file with the &lt;em&gt;.java&lt;/em&gt; extension. The program may include a lot of&#10;    such files. Then the compiler (usually, &lt;em&gt;javac&lt;/em&gt;) translates the program into a &lt;em&gt;.class&lt;/em&gt; file&#10;    containing the bytecode of the program. After, the JVM executes the program giving low-level commands to the&#10;    computer. Here, the computer is an abstraction that may be a server, PC or even a mobile device. It includes an&#10;    operating system and a hardware.&lt;/p&gt;&#10;&lt;p&gt;Actually, the processes are more complex than the image shows. It is important to note the following: the part before&#10;    JVM is &lt;strong&gt;platform independent&lt;/strong&gt;, the part after the JVM is &lt;strong&gt;platform dependent&lt;/strong&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294197" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522176650000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Object-oriented" />
                          <option value="Multithreaded" />
                          <option value="Platform independent" />
                          <option value="Manual memory management" />
                          <option value="Not popular" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;What are the main features of Java?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list>
                          <option value="0" />
                          <option value="2" />
                          <option value="1" />
                        </list>
                      </option>
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294199" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522252470000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="javadoc" />
                          <option value="javac" />
                          <option value="javad" />
                          <option value="jcc" />
                          <option value="java -cp" />
                          <option value="jre" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;Which tool is used to compile Java programs?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list>
                          <option value="1" />
                        </list>
                      </option>
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294203" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522252522000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Garbage collector" />
                          <option value="Bytecode interpreter or/and just-in-time (JIT) compiler" />
                          <option value="Bytecode verifier" />
                          <option value="Java Development Kit" />
                          <option value="Class loader" />
                          <option value="Source code to bytecode compiler" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;What does JVM include?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Failed" />
                      <option name="stepId" value="294211" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522252556000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Synonym for the Java Virtual Machine" />
                          <option value="Name of the specification for Java Virtual Machines" />
                          <option value="One of the existing JVM implementations" />
                          <option value="The only legal implementation of the JVM" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;What is a &lt;i&gt;HotSpot&lt;/i&gt;?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (3)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294213" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522252577000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Java programs are executed on the Java Virtual Machine if the operating system is not Linux" />
                          <option value="Java programs are executed on the Java Virtual Machine to reach the platform independence" />
                          <option value="Java programs depend directly on the computer hardware and the operating system" />
                          <option value="Java programs have a special syntax to reach the platform independence" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;Which statement on Java platform independence is correct?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (4)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294214" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522252607000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Javascript" />
                          <option value="Machine code" />
                          <option value="Java source code" />
                          <option value="Common Intermediate Language " />
                          <option value="Bytecode" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;What does a file &lt;i&gt;MyHelloWorldApplication.class&lt;/i&gt; contain?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (5)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294212" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522252637000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54709" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77869" />
                <option name="index" value="2" />
                <option name="name" value="Comments" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1522256274000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Comments in Java code&lt;/h1&gt;&#10;&lt;p&gt;Inside a Java program, you can write special text which will be ignored by the java compiler - known as comments.&#10;    They allow you to exclude code from the compilation process (disable it) or clarify a piece of code to yourself or&#10;    other developers.&lt;/p&gt;&#10;&lt;p&gt;The Java programming language supports three kinds of comments.&lt;/p&gt;&#10;&lt;h2&gt;End-of-line comments&lt;/h2&gt;&#10;&lt;p&gt;The java compiler ignores any text from // to the end of the line:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // The line below will be ignored&#10;    // System.out.println(&quot;Hello, World&quot;);&#10;&#10;    // It prints the string &quot;Hello, Java&quot;&#10;    System.out.println(&quot;Hello, Java&quot;); // You can write a comment here&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Multi-line comments&lt;/h2&gt;&#10;&lt;p&gt;The compiler ignores any text from /* and the nearest */. It can be used as&#10;    multiple and single-line comments:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    /* This is a single-line comment */&#10;   /*  This is a example of&#10;   a multi-line comment */&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;You can use comments inside other comments:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    /*&#10;    int a = 1; // set a to 1&#10;    int b = 2; // set b to 2&#10;    int c = a + b; // calculate a + b&#10;    */&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Java documentation comments&lt;/h2&gt;&#10;&lt;p&gt;The compiler ignores any text from /** to */ just like it ignores&#10;    multi-line comments.&lt;/p&gt;&#10;&lt;p&gt;This kind of comments can be used to automatically generate documentation about your source code using the &lt;em&gt;&#10;    javadoc &lt;/em&gt; tool. Usually, these comments are placed above declarations of classes, interfaces, methods, and so&#10;    on. Also, in this case, some special labels such as @param, @return and others are used for controlling the tool.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  /**&#10;   * The main method accepts an array of string arguments&#10;   *&#10;   * @param args from the command line&#10;   */&#10;  public static void main(String[] args) {&#10;// do nothing&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In this course we use comments in the theory and practice lessons to explain how and why&#10;    our code works.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt;: The &lt;a rel=&quot;nofollow&quot; href=&quot;https://htmlg.com/html-editor/&quot;&gt; Lorem Ipsum generator &lt;/a&gt; feature of the online HTML editor fills your&#10;    document with gibberish text which can be used as a placeholder until your final content is ready.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;To better understand how comments work in Java, copy the examples from the text to the Editor and run them with the &lt;img alt=&quot;&quot; src=&quot;https://i.imgur.com/DIOwj3t.png&quot; height=&quot;20&quot;&gt; icon on the left gutter or ⌃⇧R  shortcut, take a look at the output:&lt;/p&gt;&#10;&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;&quot; src=&quot;https://i.imgur.com/JdcYxiH.png&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294215" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522187159000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;A programmer wrote some code with a lot of comments but he forgot to add the required symbol for comments. As a&#10;    result the code did not compile. You need to comment some lines in their code to make it compile.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Please, do not remove any of the comments which are already written!&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;Use Cmd + / shortcut to comment the line of your cursor is on. You don’t need to move your cursor to the beginning of&#10;    the line.&lt;/p&gt;&#10;&lt;p&gt;Use Alt + Left Arrow/Right Arrow to navigate through code elements in a line of code.&lt;/p&gt;&#10;&lt;p&gt;Run your code with Ctrl + Shift + R before checking the task to make sure everything is compiled.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294219" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="The restriction: the class should have the name Main&#10;public class Main {&#10;&#10;    The start point of your program&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;It's compiled!&quot;); It prints &quot;It's compiled!&quot;&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522186264000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Add comments to the code so the program outputs &quot;Hello, Java platform&quot;.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;Use Alt + Cmd + / shortcut to comment a selected code fragment with block comment.&lt;/p&gt;&#10;&lt;p&gt;Use Cmd + Left Arrow/Right Arrow to navigate to the beginning/end of the line of code. Invoke it once again to&#10;    navigate to the beginning/end of the line.&lt;/p&gt;&#10;&lt;p&gt;Use Shift + Up Arrow/Down Arrow to select lines.&lt;/p&gt;&#10;&lt;p&gt;Don’t forget to run your code before checking the task to make sure everything works fine.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294220" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        System.out.print(&quot;Hello, &quot;);&#10;        System.out.print(&quot;world&quot;);&#10;        System.out.print(&quot; and &quot;);&#10;        System.out.print(&quot;Java&quot;);&#10;        System.out.print(&quot; platform&quot;);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522186549000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given a program with incorrect comments. The program cannot be compiled. Fix it so that it prints a&#10;    single line &quot;Yet another simple Java application&quot;.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;You can delete a line of code with the Cmd + X shortcut, just put a cursor somewhere on the line.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294221" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        /*&#10;        // System.out.println(&quot;Yet another simple Java application&quot;);&#10;        System.out.println(&quot;Do not print this line&quot;);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522186843000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given a program containing a Javadoc comment. Make it compile. Do not remove the output message.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;Typing /** + then pressing Enter above a method signature will create Javadoc stubs for you.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (3)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294218" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;&#10;    /**&#10;     * It prints the text &quot;It works correctly&quot; to the standard output&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;It works correctly&quot;);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522186929000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Javadoc comments" />
                          <option value="Standard multi-line comments" />
                          <option value="End-of-line comments" />
                          <option value="All types of comments are used here" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;What type of comments &lt;strong&gt;are not used&lt;/strong&gt; in the following code?&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class HelloAltApp {&#10;&#10;    /**&#10;     * It prints the message &quot;Hello, Java!&quot;&#10;     */&#10;    public static void main(String[] args) {&#10;        // System.out.println(&quot;Hello, world!&quot;);&#10;        System.out.println(&quot;Hello, Java!&quot;);&#10;    }&#10;}&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294222" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522256273000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54721" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77872" />
                <option name="index" value="3" />
                <option name="name" value="Main method" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1522286910000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;The declaration of the main method&lt;/h1&gt;&#10;&lt;p&gt;Java is primarily an object-oriented language. It means a Java program can be considered to be a collection of&#10;    objects that communicate via calling each other's methods. A typical Java program includes a lot of classes,&#10;    interfaces, objects, and other concepts from object-oriented programming.&lt;/p&gt;&#10;&lt;p&gt;Even the simplest &quot;procedural-style&quot; program should have at least one class and the main method inside it to start&#10;    the program. The main method is the entry point for any applications. Ever since Java 7 there has been no other way&#10;    to start an application without this method (excluding the case when you start your application inside a special&#10;    container for applications but it is not considered in this course).&lt;/p&gt;&#10;&lt;p&gt;Let's see an example of the simplest application that prints the text &quot;Hello, Java&quot; in the standard output:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    System.out.println(&quot;Hello, Java&quot;);&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Here is a class named &lt;em&gt;Task&lt;/em&gt;. The class contains the main method for starting the program.&lt;/p&gt;&#10;&lt;p&gt;It is important to mention that a class containing the main method can have any name, but the main method should&#10;    always have the same name.&lt;/p&gt;&#10;&lt;p&gt;Let's take a closer look at the declaration of the main method:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;public static void main(String[] args)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;The keyword &lt;em&gt;public&lt;/em&gt; indicates that the method can be invoked from everywhere&lt;/li&gt;&#10;    &lt;li&gt;The keyword &lt;em&gt;static&lt;/em&gt; indicates the method can be invoked without creating an instance of the class&lt;/li&gt;&#10;    &lt;li&gt;The keyword &lt;em&gt;void&lt;/em&gt; indicates the method doesn't return any value&lt;/li&gt;&#10;    &lt;li&gt;The array variable &lt;em&gt;args&lt;/em&gt; contains arguments entered at the command line if there are no arguments then&#10;        the array is empty&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;As you can see, even the simplest Java application contains a lot of concepts. All of them will be studied in the&#10;    next few topics which relate to methods and object-oriented programming. For now you just need to understand how to&#10;    write and run a simple Java program with the main method.&lt;/p&gt;&#10;&lt;h2&gt;Invalid declarations of the main method&lt;/h2&gt;&#10;&lt;p&gt;If the main method has an invalid declaration, two cases are possible:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;your program cannot be compiled&lt;/li&gt;&#10;    &lt;li&gt;your program is successfully compiled but can't be started&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h3&gt;Your program cannot be compiled&lt;/h3&gt;&#10;&lt;p&gt;It is the case when the main method declaration breaks the syntax&#10;    of Java.&lt;/p&gt;&#10;&lt;p&gt;Example: no returning value (even void)&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public static main(String[] args) {&#10;    System.out.println(&quot;Hello, Java&quot;);&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Example: a mistake in the keyword (pubic instead of public)&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  pubic static void main(String[] args) {&#10;    System.out.println(&quot;Hello, Java&quot;);&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h3&gt;A program can be compiled but cannot be run&lt;/h3&gt;&#10;&lt;p&gt;It is the case when the main method has a correct&#10;    declaration as a regular method but it doesn't satisfy the specific requirement of the main method.&lt;/p&gt;&#10;&lt;p&gt;Examples: should be String[] args&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public static main(String args) {&#10;    System.out.println(&quot;Hello, Java&quot;);&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Example: there is no keyword static&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public void main(String[] args) {&#10;    System.out.println(&quot;Hello, Java&quot;);&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;In both cases, an error happens at runtime.&lt;/p&gt;&#10;&lt;h2&gt;Conclusion&lt;/h2&gt;&#10;&lt;p&gt;So, the main method is the entry point of any Java programs. It has a very specific syntax which you need to&#10;    remember.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;Mistakes are an essential part of successful learning. They can also be very annoying and drain your motivation. The&#10;    IDE helps you with code errors, by alerting you to the most common ones and suggesting solutions.&lt;/p&gt;&#10;&lt;p&gt;Take a look at the code example from the “Invalid declarations of the main method” above. The red&#10;    squiggly line under the code means there’s something wrong. Put the cursor on the highlighted code to see what&#10;    the issue is:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KN5ekDy.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;You can use the red bulb or press Alt + Enter to see a list of suggested fixes.&lt;/p&gt;&#10;&lt;p&gt;Note the red icon at the top right. It shows you that there are some errors in the file. Hover over the red stripe to&#10;    see the list of errors. Click on it to navigate to the line with the error and fix it:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/2j1f14G.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;When everything is fixed, there is a green check icon in the right top corner:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eedLZPY.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294223" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522189122000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Write a simple program that includes the main method.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Your class must be named Main if it is public, otherwise, it may have any name. It's a&#10;    restriction of the platform, not Java.&lt;/p&gt;&#10;&lt;p&gt;The program should print the following text: Hello, Java!&lt;/p&gt;&#10;&lt;h3&gt;IDE tips &amp;amp; tricks&lt;/h3&gt;&#10;&lt;p&gt;Smart autocompletion is an essential feature of a professional code editor, which helps you to save time and avoid&#10;    misprints. It is equally powerful for learning because you can use it to find the right variable, function,&#10;    parameter, or code construct. Start typing or simply press Ctrl + Space to get a list of suggested options:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eEmXP2r.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;Code snippets, or live templates, can also be a handy tool. They not only speed up your coding, but help you learn&#10;    new language syntax as well. Use Cmd + J to see the full list of code snippets available. Start typing to find the&#10;    one you want to add, and then use Tab to fill in the blanks:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NfO8x22.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/B272J1i.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294225" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522189783000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="It will not compile" />
                          <option value="I'm the main" />
                          <option value="It will compile but throw an error in runtime" />
                          <option value="No! I'm still the main!" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;What will be printed if compile and run the class below?&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;public class Main {&#10;&#10;  public static void main(String args) throws Exception {&#10;    System.out.printf(&quot;No! I'm still the main!&quot;);&#10;  }&#10;&#10;  public void main(String[] args) throws Exception {&#10;    System.out.printf(&quot;I'm the main&quot;);&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294229" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522286863000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Command-line arguments&lt;/h1&gt;&#10;&lt;p&gt;A Java application can accept data from the external world using command-line arguments.&lt;/p&gt;&#10;&lt;p&gt;Here is a declaration of the main method:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;public static void main(String[] args)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The array of string args contains string arguments from the command line.&lt;/p&gt;&#10;&lt;p&gt;Let's assume we have the following code in the file Task.java:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;public class Task {&#10;  public static void main(String[] args) {&#10;    System.out.println(&quot;passed arguments: &quot; + args.length);&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;This code outputs the string containing a number of passed arguments.&lt;/p&gt;&#10;&lt;p&gt;Let's compile this code (the result is bytecode):&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;javac Task.java&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Then run the bytecode without parameters:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;java Task&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;It outputs:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;passed arguments: 0&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Let's run it with two parameters separated by space:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;java Task arg1 arg2&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;It outputs:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;passed arguments: 2&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;So, we have learned that in the command-line interface, arguments must be separated by spaces.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;IntelliJ IDEA features a local terminal that makes it possible to access the command line. Depending on your&#10;    platform, you can work with command prompt, powershell, bash, etc. Using the terminal, you can execute any command&#10;    without leaving the IDE.&lt;/p&gt;&#10;&lt;p&gt;To run the console, press Alt + F12 or click the Terminal tool window button:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/QxLYhrJ.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294224" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522190539000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="two three " />
                          <option value="java ArgPrinter one two three " />
                          <option value="one two three " />
                          <option value="ArgPrinter one two three " />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;You have been given the following class. What will be printed?&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;public class Task {&#10;  public static void main(String[] args) {&#10;    for (String s : args) {&#10;      System.out.print(s + &quot; &quot;);&#10;    }&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Let's compile it and run the following command:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;java Task one two three&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Try to start it locally on your computer using the command line.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294226" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522286909000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given a program which should print &quot;We are robots!&quot; but now it won’t compile. Fix the program to make it compile.&lt;/p&gt;&#10;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294231" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;&#10;    public static main(String args) {&#10;        System.out.println(&quot;We are robots!&quot;);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522190779000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given a program that should print &quot;Cats are robots!&quot; but it cannot be started. Fix the program.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Programming (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294230" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;    private static void main(String[] args) {&#10;        System.out.println(&quot;Cats are robots!&quot;);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522190828000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given a program that should print &quot;Hello, Java!&quot; but it's not compiled. Fix the program.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Programming (3)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294227" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;&#10;    public static int main(String[] args) {&#10;        System.out.println(&quot;Hello, Java!&quot;);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522190902000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="a" />
                          <option value="b" />
                          <option value="c" />
                          <option value="d" />
                          <option value="e" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;Which declarations of the main method will cause the program to compile but not run?&lt;/p&gt;&#10;&lt;p&gt;a) &lt;code class=&quot;java&quot;&gt;public static void main(String[] args)&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;b) &lt;code class=&quot;java&quot;&gt;public static void main(String args)&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;c) &lt;code class=&quot;java&quot;&gt;private static void main(String[] args)&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;d) &lt;code class=&quot;java&quot;&gt;public static main(String[] args)&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;e) &lt;code class=&quot;java&quot;&gt;public void main(String[] args)&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt;: Try to start all the cases on your computer.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294228" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522285238000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54724" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77875" />
                <option name="index" value="4" />
                <option name="name" value="Variables and Types" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1522287042000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Variables&lt;/h1&gt;&#10;&lt;p&gt;A variable is a named storage for a value. It has a name (identifier) and a type.&lt;/p&gt;&#10;&lt;p&gt;The name identifies a variable in some context. It's possible to read and change the value of a variable by its&#10;    name.&lt;/p&gt;&#10;&lt;p&gt;The general form for declaring variables is the following:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;DataType variableName;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The type (data type) of a variable determines which values can be stored in the variable and the possible operations&#10;    you can perform on them.&lt;/p&gt;&#10;&lt;h2&gt;Data types&lt;/h2&gt;&#10;&lt;p&gt;Java is a &lt;strong&gt;statically typed&lt;/strong&gt; programming language, which means that every variable and every&#10;    expression has a type that is known at the compile time.&lt;/p&gt;&#10;&lt;p&gt;All data types are separated into two groups: &lt;strong&gt;primitive types&lt;/strong&gt; and &lt;strong&gt;references types&lt;/strong&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;A &lt;strong&gt;primitive type&lt;/strong&gt; variable stores a simple value (such as a number or character). Java has eight&#10;    primitive data types. They can be divided into four groups:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;integer numbers: &lt;strong&gt;byte&lt;/strong&gt;, &lt;strong&gt;short&lt;/strong&gt;, &lt;strong&gt;int&lt;/strong&gt;, &lt;strong&gt;long&lt;/strong&gt; (for&#10;        example, 83 is an integer number)&#10;    &lt;/li&gt;&#10;    &lt;li&gt;floating-point numbers: &lt;strong&gt;float&lt;/strong&gt;, &lt;strong&gt;double&lt;/strong&gt; (for example, 3.1415 is a floating point&#10;        number)&#10;    &lt;/li&gt;&#10;    &lt;li&gt;logical type: &lt;strong&gt;boolean&lt;/strong&gt; (true or false)&lt;/li&gt;&#10;    &lt;li&gt;characters: &lt;strong&gt;char&lt;/strong&gt; (for example, 'a', '3')&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;The most used primitive types are &lt;strong&gt;int&lt;/strong&gt;, &lt;strong&gt;long&lt;/strong&gt;, &lt;strong&gt;boolean&lt;/strong&gt;,&#10;    &lt;strong&gt;char&lt;/strong&gt; and &lt;strong&gt;double&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;p&gt;A &lt;strong&gt;reference type&lt;/strong&gt; variable stores an address in memory where the data is located. The data can be&#10;    made up as a complex structure that includes other data types as their parts.&lt;/p&gt;&#10;&lt;p&gt;We will often use the reference type String. It represents a sequence of characters like &quot;abc&quot; or &quot;Hello, Java&quot;.&lt;/p&gt;&#10;&lt;p&gt;Let's declare a variable named number of the type int:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;int number;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Here is a variable named text of the type String:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;String text;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;To assign a value to a variable we should use the special operator.&lt;/p&gt;&#10;&lt;h2&gt;The assignment operator&lt;/h2&gt;&#10;&lt;p&gt;Java has a special operator denoted as =. It assigns a value to a variable.&lt;/p&gt;&#10;&lt;p&gt;In this case, the variable has to be declared already:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;variableName = value;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;It is also possible to declare and initialize a variable in one line:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;DataType variableName = value;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public static void main(String[] args) {&#10;// put your code here&#10;    int one = 1; // declares an integer variable &quot;one&quot; and assigns the value 1 to it&#10;    int two; // declares an integer variable &quot;two&quot;&#10;    two = 2; // assign the value 2 to the variable &quot;two&quot;&#10;    int three = 3, four = 4; // declares two integer variables and assigns values to them&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;To read the value of a variable you should write its name.&lt;/p&gt;&#10;&lt;p&gt;For example, let's print the variables:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    System.out.println(one); // prints 1&#10;    System.out.println(two); // prints 2&#10;    System.out.println(three); // prints 3&#10;    System.out.println(four); // prints 4&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;In the following example, the variable five is declared and initialized with the value of another variable:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int five = four; // read the value of the variable &quot;four&quot; and assign it to the variable &quot;five&quot;;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Here are some more variables:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    char ch = 'A'; // declare a character variable named &quot;ch&quot; and assign 'A' to it&#10;    String str = &quot;Hello, Java&quot;; // declare a string variable named &quot;str&quot; and assign text to it&#10;    double pi = 3.1415; // declare a double variable named &quot;pi&quot; and assign 3.1415 to it&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;For more details about variables go here: &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html&quot;&gt;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html&lt;/a&gt;&#10;&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;Code autocompletion can help you to find the right variable. Once declared, a variable is added to the&#10;    autocompletion list. Just start typing or simply press Ctrl + Space to get a list of all the options:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XdYBO7f.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294258" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522192032000" />
                    </TheoryTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Rules for naming variables&lt;/h1&gt;&#10;&lt;p&gt;Java has some rules for naming variables:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;names are case-sensitive&lt;/li&gt;&#10;    &lt;li&gt;a name can include Unicode letters, digits, and two special characters ($, _)&lt;/li&gt;&#10;    &lt;li&gt;a name can't start with a digit&lt;/li&gt;&#10;    &lt;li&gt;a name must not be a keyword (class, static, and int are illegal names)&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;You cannot break these rules, otherwise, your program will not compile.&lt;/p&gt;&#10;&lt;p&gt;Here are some legal names of variables:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;number, $ident, bigValue, _val, abc, k, var&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;And here are some illegal ones:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;@ab, 1c, !ab, class&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Ever since Java 9, the single character _ is an illegal way to name a variable, but _a and __ are legal names.&lt;/p&gt;&#10;&lt;h2&gt;Naming conventions for variables&lt;/h2&gt;&#10;&lt;p&gt;Also, there are naming conventions for naming variables:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;if a variable name has a single word it should be in lowercase (for instance: number, val)&lt;/li&gt;&#10;    &lt;li&gt;if a variable name includes multiple words it should be in lowerCamelCase, i.e. the first word should be in&#10;        lowercase and each word after the first has its first letter written in uppercase (for instance: numberOfCoins)&#10;    &lt;/li&gt;&#10;    &lt;li&gt;variable names should not start with _ or $ characters, even though both are allowed&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;These conventions are not required, but it is strongly recommended to follow them. They make your code more readable&#10;    for yourself and other Java programmers.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;Inspired by the best community practices, IntelliJ IDEA checks your code for many types of possible errors and code&#10;    smells. Naming rules and conventions are among them.&lt;/p&gt;&#10;&lt;p&gt;If you try one of the examples above and declare a variable with an invalid name, the IDE will highlight it as an&#10;    error and suggest a quick fix (within the red bulb or Alt + Enter shortcut):&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/apOUN00.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;You can also tell the IDE to check your variables for naming conventions. Go to Preferences | Editor | Inspections |&#10;    Java | Naming conventions and switch on the &lt;em&gt;Local variable naming convention &lt;/em&gt;inspection:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/9KwVlp9.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;Now all the inappropriate names will be highlighted as well:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/47GE05I.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;IntelliJ IDEA can also declare a new variable for you with a quick intention action. Just start with a value, and&#10;    then invoke the intention action with Alt + Enter:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/OlZWrCQ.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;All of the &lt;a href=&quot;https://www.jetbrains.com/help/idea/disabling-and-enabling-inspections.html&quot;&gt;inspections can be&#10;    switched on or off&lt;/a&gt;, or configured as necessary, as well as the &lt;a href=&quot;https://www.jetbrains.com/help/idea/disabling-intention-actions.html&quot;&gt;intention actions&lt;/a&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294262" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522192643000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="underscore (_)" />
                          <option value="dollar sign ($)" />
                          <option value="any digit (0..9)" />
                          <option value="letter of the alphabet" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;The name of a variable can start with ...&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294263" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522286958000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Input and output in Java code&lt;/h1&gt;&#10;&lt;p&gt;There are several ways to read values from the standard input. The first way is to use java.util.Scanner.&lt;/p&gt;&#10;&lt;p&gt;Let's read two integer numbers from the standard input, add them together and write the result in the standard&#10;    output:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;import java.util.Scanner;&#10;public class Task {&#10;  public static void main(String[] args) {&#10;    Scanner scanner = new Scanner(System.in);&#10;    int a = scanner.nextInt(); // it reads an integer value from the standard input&#10;    int b = scanner.nextInt(); // it reads another integer value from the standard input&#10;    System.out.println(a + b); // it writes the result of a + b in the standard output&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Another common way to read integer numbers is to use java.io.BufferedReader.&lt;/p&gt;&#10;&lt;p&gt;Let's read two integer numbers, add them together and write the result in the standard output again:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;import java.io.BufferedReader;&#10;import java.io.InputStreamReader;&#10;import java.io.IOException;&#10;public class Task {&#10;  public static void main(String[] args) throws IOException {&#10;// the object for reading&#10;    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));&#10;// it takes a string and splits it by whitespaces&#10;    String[] values = reader.readLine().split(&quot;\\s+&quot;);&#10;    int a = Integer.parseInt(values[0]); // It converts the first value to integer&#10;    int b = Integer.parseInt(values[1]); // It converts the second value to integer&#10;    System.out.println(a + b);&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;Reading documentation is a must when learning a new programming language. IntelliJ IDEA makes this process as&#10;    seamless as possible.&lt;/p&gt;&#10;&lt;p&gt;Put a cursor on the class, method, variable, or function you want to read about, and then press F1 to open the quick&#10;    documentation pop-up:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/VMpNFVk.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;Use F1 once more to switch to the tool window mode:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bs5oAMX.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;This lets you read the documentation in parallel with reading your code. Go through a code fragment and read about&#10;    the code constructions your cursor is on, without any additional shortcuts or mouse clicks. You can also click&#10;    hyperlinks to find out more details.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Theory (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294538" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522193409000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Write a program that reads two integer numbers from the standard input, and then outputs them in the reverse order&#10;    separated by a space.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;If you’ve ever been learning a foreign language, you probably know that feeling when you can't quite put your&#10;    finger on the right word. Learning a new programming language sometimes feels the same.&lt;/p&gt;&#10;&lt;p&gt;The IDE can help you to&#10;    remember the right syntaxes. Start typing any parts you remember and the code completion will give you hints even if&#10;    you only have some parts of the naming right:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/W8OiII0.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;Code refactorings can also be handy regardless of how complicated your code is. For example, use Alt + Cmd + V to&#10;    extract a variable.&lt;/p&gt;&#10;&lt;p&gt;It is often more effective to duplicate a line of code and then edit it, than to write a new code line from scratch.&#10;    Cmd + D works great for this, as you don’t need to select the whole line.&lt;/p&gt;&#10;&lt;p&gt;When you need to select some code fragments, shrinking the selection with Alt + Up Arrow (undo with Alt + Down&#10;    Arrow) can be very helpful.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 2&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2 1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294265" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522193849000" />
                    </CodeTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;General information about types&lt;/h1&gt;&#10;&lt;p&gt;Java is a &lt;strong&gt;statically typed&lt;/strong&gt; programming language, which means that every variable and every&#10;    expression has a type that is known at the compile time.&lt;/p&gt;&#10;&lt;p&gt;In Java, all data types are divided into two categories: &lt;strong&gt;primitive types&lt;/strong&gt; and &lt;strong&gt;reference&#10;    types&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;h2&gt;Primitive types&lt;/h2&gt;&#10;&lt;p&gt;Java has eight primitive data types. They can be divided into four groups:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;strong&gt;integer numbers&lt;/strong&gt;: byte, short, int, long (for example, 83 is an integer number);&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;floating-point numbers&lt;/strong&gt;: float, double (for example, 3.1415 is a floating point number);&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;logical type&lt;/strong&gt;: boolean (true or false);&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;characters for representing letters and digest&lt;/strong&gt;: char (for example, 'a', '3').&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;These types are built into the language. The types belonging to the same group differ in size and, as a consequence,&#10;    the set of possible values.&lt;/p&gt;&#10;&lt;p&gt;Here is an example of declaring variables of different types and their initialization:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    int n = 4;&#10;    double pi = 3.1415;&#10;    boolean b = true;&#10;    char c = 'c';&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Sizes and ranges of primitive types&lt;/h2&gt;&#10;&lt;p&gt;&lt;strong&gt;Integer types&lt;/strong&gt; store numbers such as 10, 15, -14. The size of the values that can be stored depends&#10;    on the integer type that we choose. The range of values is calculated as $−(2^{n−1})$ to $(2^{n−1})−1$,&#10;    where n is the number of bits. The range includes 0 as well.&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;strong&gt;byte&lt;/strong&gt;: the size is 8 bits (1 byte), the range is from -128 to 127&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;short&lt;/strong&gt;: the size is 16 bits (2 bytes), the range is from -32768 to 32767&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;int&lt;/strong&gt;: the size is 32 bits (4 bytes), the range is from $−(2^{31})$ to $(2^{31})−1$&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;long&lt;/strong&gt;: the size is 64 bits (8 bytes), the range is from $−(2^{63})$ to $(2^{63})−1$&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&lt;strong&gt;Floating-point types&lt;/strong&gt; represent numbers with a fractional part.&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;strong&gt;float&lt;/strong&gt;: the size is 32 bits (4 bytes), the range is from 3.4e−038 to 3.4e+038&#10;        (approximately, 6-7&#10;        significant decimal digits)&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;double&lt;/strong&gt;: the size is 64 bits (8 bytes), the range is from 1.7e−308 to 1.7e+308&#10;        (approximately, 14-16&#10;        significant decimal digits)&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;The &lt;strong&gt;character type&lt;/strong&gt; (char) stores the character constant in the memory. The size is 16 bits (2&#10;    bytes). The range is from 0 to 65536 (unsigned).&lt;/p&gt;&#10;&lt;p&gt;The &lt;strong&gt;boolean type&lt;/strong&gt; can store only two values: &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;false&lt;/strong&gt;. It&#10;    represents only one bit of information, but its size is not something that's precisely defined.&lt;/p&gt;&#10;&lt;p&gt;So, remember Java has 8 primitive types. The most used are &lt;strong&gt;int&lt;/strong&gt;, &lt;strong&gt;long&lt;/strong&gt;, &lt;strong&gt;boolean&lt;/strong&gt;,&#10;    &lt;strong&gt;char&lt;/strong&gt;, and &lt;strong&gt;double&lt;/strong&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Theory (3)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294264" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522234919000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="char" />
                          <option value="String" />
                          <option value="double" />
                          <option value="int" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;What is the type of the variable &lt;code class=&quot;java&quot;&gt; var = '5';&lt;/code&gt;?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294261" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522287041000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54727" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77873" />
                <option name="index" value="5" />
                <option name="name" value="Integer" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1522287042000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;An overview of primitive types for integer numbers&lt;/h1&gt;&#10;&lt;p&gt;There are four ways to represent integer numbers in Java: &lt;strong&gt;byte&lt;/strong&gt;, &lt;strong&gt;short&lt;/strong&gt;,&#10;    &lt;strong&gt;int&lt;/strong&gt;, and &lt;strong&gt;long&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;p&gt;These types differ by their sizes and ranges:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;strong&gt;byte&lt;/strong&gt;: the size is 8 bits (1 byte), the range is from -128 to 127&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;short&lt;/strong&gt;: the size is 16 bits (2 bytes), the range is from -32768 to 32767&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;int&lt;/strong&gt;: the size is 32 bits (4 bytes), the range is from $-2^{31}$ to $2^{31} - 1$ &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;long&lt;/strong&gt;: the size is 64 bits (8 bytes), the range is from $-2^{63}$ to $2^{63} - 1$ &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;The most widely used integer types are &lt;strong&gt;int&lt;/strong&gt; and &lt;strong&gt;long&lt;/strong&gt;. The largest one is &lt;strong&gt;long&lt;/strong&gt; and smallest one is &lt;strong&gt;byte&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;p&gt;Let's declare and initialize several variables of different integer types:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    int decimalNumber = 500; // a decimal number, it consists of digits 0-9&#10;    int hexNumber = 0xFF; // a hexadecimal number, it consists of digits 0-9 and letters A-F&#10;    int binaryNumber = 0b10001; // a binary number, it consists of digits 0 and 1&#10;    int octalNumber = 0335; // an octal number, it consists of digits 0-7&#10;    long longNumber = 33L; // L or l - is a literal for longs&#10;    long bigNumber = 100_000_000_000L; // _ is the underscore character&#10;  }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;If an integer value ends with the letter L or l it is the type &lt;strong&gt;long&lt;/strong&gt;, otherwise it is the type &lt;strong&gt;int&lt;/strong&gt;. It's recommended&#10;    to use the uppercase letter L because the lowercase letter l is similar to the digit 1.&lt;/p&gt;&#10;&lt;p&gt;The default value for all integer types is 0 (zero):&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int intZero; // it's equal to 0;&#10;    long longZero; // it's equal to 0L;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;To know the max and min values for these types you should write the following code:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int minInt = Integer.MIN_VALUE; // The min value of int type&#10;    int maxInt = Integer.MAX_VALUE; // The max value of int type&#10;    long minLong = Long.MIN_VALUE; // The min value of long type&#10;    long maxLong = Long.MAX_VALUE; // The max value of long type&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Now it's time to learn about arithmetic operations for integer types.&lt;/p&gt;&#10;&lt;h2&gt;Binary operators&lt;/h2&gt;&#10;&lt;p&gt;The Java programming language provides operators for performing addition, subtraction, multiplication, division&#10;    (integer) and remainder with two integer numbers (byte, short, int, long). The first three operators should be&#10;    absolutely clear, but the last two may need additional explanation.&lt;/p&gt;&#10;&lt;p&gt;The operator / returns the integer part of division two numbers, a fractional part is discarded.&lt;/p&gt;&#10;&lt;p&gt;The operator % returns the remainder of two numbers. For instance 10 % 3 is 1 because 10 divided by 3 leaves a&#10;    remainder of 1.&lt;/p&gt;&#10;&lt;p&gt;See the following example:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int a = 6;&#10;    int b = 2;&#10;    int sum = a + b; // addition, the result is 8&#10;    int diff = a - b; // subtraction, the result is 4&#10;    int mult = a * b; // multiplication, the result is 12&#10;    int intDiv = a / b; // integer division, the result is 3&#10;    int remainder = a % b; // remainder, the result is 0&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;All five operators can be performed for negative numbers as well.&lt;/p&gt;&#10;&lt;p&gt;Let's consider another example with integer division and remainder:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int a = 15;&#10;    Int b = 6; // a is 15, b is 6&#10;    int intDiv = a / b; // integer division, the result is 2&#10;    int rem = a % b; // remainder, the result is 3&#10;    int negRem = -21 % 4; // the result is -1 because -21 divided by 4 leaves a remainder of -1&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Be careful with the dividing numbers by zero (0). It throws a runtime exception.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int divResult = 5 / 0; // throws ArithmeticException&#10;    int remResult = 5 % 0; // also throws ArithmeticException&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Unary operators&lt;/h2&gt;&#10;&lt;p&gt;Also there are several unary operators: unary plus, unary minus, increment (prefix and postfix), decrement (prefix&#10;    and postfix).&lt;/p&gt;&#10;&lt;p&gt;The unary plus indicates a positive value. It's an optional operator. The unary minus negates a value or an&#10;    expression:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int a = +4; // unary plus indicates the positive value (it's an optional operator)&#10;    int b = -a; // unary minus negates the value 4, the result is -4&#10;    b = -b; // negate the value again, the result is 4&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The increment operator adds 1 to the variable's value. The decrement operator subtracts 1 from the variable's value.&#10;    Both operators exist in two forms: prefix and postfix.&lt;/p&gt;&#10;&lt;p&gt;The difference between prefix and postfix forms is the order of execution. In the prefix form first of all the value&#10;    is changed and then it is assigned to another variable. In the postfix form at first the value is assigned to&#10;    another variable and then it is changed:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int a = 5; // a is 5&#10;    int b = ++a; // prefix increment: b is 6, a is 6&#10;    int c = b++; // postfix increment: c is 6, b is 7&#10;    int d = c--; // postfix decrement: d is 6, c is 5&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;The different forms of the assignment operator&lt;/h2&gt;&#10;&lt;p&gt;In Java the assignment operator (&quot;=&quot;) has several additional forms: +=, *=, /=, %= and so one:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int a = 2, b = 3, c = 4;&#10;    a += b; // the same as a = a + b, the result is 5&#10;    c *= b; // the same as c = c * b, the result is 12&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Arithmetic and assignment operators precedence&lt;/h2&gt;&#10;&lt;p&gt;Operators have different priorities in expressions. These priorities define the operator's precedence (the order of&#10;    execution).&lt;/p&gt;&#10;&lt;p&gt;Below, the studied operators are listed according to precedence order (from the highest to the lowest):&lt;/p&gt;&#10;&lt;ol&gt;&#10;    &lt;li&gt;unary: +, -, ++, --&lt;/li&gt;&#10;    &lt;li&gt;multiplicative: *, /, %&lt;/li&gt;&#10;    &lt;li&gt;additive: +, -&lt;/li&gt;&#10;    &lt;li&gt;assignment: =, +=, -=, *=, /=&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt;To change the order of execution, you can enclose the expression in parentheses like in mathematics:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int a = 3 + 4 * 5; // the result is 23&#10;    int b = (3 + 4) * 5; // the result is 35&#10;    int c = 1 + (2 * (3 + (4 * (5 + 6)))); // 11 -&amp;gt; 44 -&amp;gt; 47 -&amp;gt; 94 -&amp;gt; 95&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All listed rules are also valid for other integer types: &lt;strong&gt;byte&lt;/strong&gt;, &lt;strong&gt;short&lt;/strong&gt;, &lt;strong&gt;long&lt;/strong&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294256" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522234606000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Write a program that reads an integer value n from the standard input and outputs the result of the following arithmetic expression:$((n+1)∗n+2)∗n+3$ &lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;45&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294247" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522234655000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;N squirrels found K nuts and decided to divide them equally. Determine how many nuts each squirrel will get.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Input data format&lt;/strong&gt;: There are two positive numbers N and K, each of them is not greater than 10000.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;14&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294254" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522195748000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;N squirrels found K nuts and decided to divide them equally. Find how many nuts will be left after each of the squirrels takes the equal amount of nuts.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Input data format&lt;/strong&gt;: There are two positive integers N and K, each of them is not greater than 10000.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;14&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294251" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522195991000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You’re given a non-negative integer N (0 ≤ N ≤ 1000000), find the number of tens in it (i.e. next to last digit of the number).&lt;/p&gt; &#10;&lt;p&gt;If there is no next to last digit, you can consider that the number of tens equals to zero.&lt;/p&gt;&#10;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;173&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;7&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (3)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294250" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522196091000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You’re given a two-digit number. Output its first digit (i.e. the number of tens).&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;42&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Programming (4)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294249" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522196129000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You’re given a three-digit integer (i.e. an integer from 100 to 999). Find the sum of its digits.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;476&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;17&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Programming (5)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294252" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522196179000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Write a program that reads a three digit number, calculates the new number by reversing its digits, and outputs the new number.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;907&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;709&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Programming (6)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294248" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522196212000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given the values of the two moments in time from the same day both in the format: hours, minutes and seconds. It is known that the second moment in time happened not earlier than the first one.&lt;/p&gt;&#10;&lt;p&gt;Find how many seconds passed between these two moments of time.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Input data format&lt;/strong&gt;: The program gets the input of the three integers: hours, minutes, seconds, defining the first moment of time, and three integers that define the second moment time.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Output data format&lt;/strong&gt;: Output the number of seconds between these two moments of time.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;1&lt;br&gt;1&lt;br&gt;2&lt;br&gt;2&lt;br&gt;2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3661&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;2&lt;br&gt;30&lt;br&gt;1&lt;br&gt;3&lt;br&gt;20&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;50&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="name" value="Programming (7)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294255" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522196309000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given a natural number N, not greater than 10000. Output the even number following this N.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;7&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;10&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="10" />
                      <option name="name" value="Programming (8)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294257" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522196348000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Some schools have decided to create three new math groups and equip the classrooms for them with the new desks. Only two students may sit at any one desk. The number of students in each of the three groups is known. Output the smallest amount of desks, which will need to be purchased. Each new group sits in its own classroom.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Input data format&lt;/strong&gt;: The program receives the input of the three non-negative integers: the number of students in each of the three classes (the numbers do not exceed 1000).&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;20&lt;br&gt;21&lt;br&gt;22&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;32&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;16&lt;br&gt;18&lt;br&gt;20&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;27&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="11" />
                      <option name="name" value="Programming (9)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294260" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522196416000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Snail creeps up the vertical pole of height H feets. Each day it goes A feets up, and each night it goes B feets down. On which day will the snail reach the top of the pole?&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Input data format&lt;/strong&gt;: On the input the program receives non-negative integers H, A, B, where H &amp;gt; B and A &amp;gt; B. Every integer does not exceed 100.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;10&lt;br&gt;3&lt;br&gt;2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;20&lt;br&gt;7&lt;br&gt;3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="12" />
                      <option name="name" value="Programming (10)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294259" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522196486000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54725" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77876" />
                <option name="index" value="6" />
                <option name="name" value="Boolean" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1522253162000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;The boolean type&lt;/h1&gt;&#10;&lt;p&gt;The &lt;strong&gt;boolean&lt;/strong&gt; is a primitive data type that has only two possible values: &lt;strong&gt;false&lt;/strong&gt; or&#10;    &lt;strong&gt;true&lt;/strong&gt;. The default value for this type is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    boolean t = true; // t is true&#10;    boolean f = false; // f is false&#10;    boolean defaultValue; // defaultValue is false&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Remember, you cannot assign an integer value to a boolean variable. In Java, 0 is not equal to&#10;    &lt;strong&gt;false&lt;/strong&gt;.&#10;&lt;/p&gt;&#10;&lt;h2&gt;Logical operators&lt;/h2&gt;&#10;&lt;p&gt;There are four logical operators &lt;strong&gt;NOT&lt;/strong&gt;, &lt;strong&gt;AND&lt;/strong&gt;, &lt;strong&gt;OR&lt;/strong&gt; and&#10;    &lt;strong&gt;XOR &lt;/strong&gt;which allow us to build &lt;strong&gt;logical expressions&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;p&gt;The &lt;strong&gt;NOT&lt;/strong&gt; operator is a unary operator that reverses the boolean value. It is written as !.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    boolean f = false; // f is false&#10;    boolean t = !f; // t is true&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The &lt;strong&gt;AND&lt;/strong&gt; operator is a binary operator that returns &lt;strong&gt;true&lt;/strong&gt; if both operands are&#10;    &lt;strong&gt;true&lt;/strong&gt;, otherwise, it is &lt;strong&gt;false&lt;/strong&gt;. The operator can be written as &amp;amp;&amp;amp; and &amp;amp;.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    boolean b1 = false &amp;amp;&amp;amp; false; // false&#10;    boolean b2 = false &amp;amp;&amp;amp; true; // false&#10;    boolean b3 = true &amp;amp;&amp;amp; false; // false&#10;    boolean b4 = true &amp;amp;&amp;amp; true; // true&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The &lt;strong&gt;OR&lt;/strong&gt; operator is a binary operator that returns &lt;strong&gt;true&lt;/strong&gt; if at least one operand is&#10;    &lt;strong&gt;true&lt;/strong&gt;, otherwise, it returns &lt;strong&gt;false&lt;/strong&gt;. The operator can be written as ||and |.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    boolean b1 = false || false; // false&#10;    boolean b2 = false || true; // true&#10;    boolean b3 = true || false; // true&#10;    boolean b4 = true || true; // true&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The &lt;strong&gt;XOR&lt;/strong&gt; (&lt;strong&gt;exclusive OR&lt;/strong&gt;) operator is a binary operator that returns&#10;    &lt;strong&gt;true&lt;/strong&gt; if boolean operands have different values, otherwise, it is &lt;strong&gt;false&lt;/strong&gt;. The&#10;    operator is written as ^ and can be used Instead of the relation operator != (&lt;strong&gt;NOT EQUAL TO&lt;/strong&gt;).&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    boolean b1 = false ^ false; // false&#10;    boolean b2 = false ^ true; // true&#10;    boolean b3 = true ^ false; // true&#10;    boolean b4 = true ^ true; // false&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Short-circuit operators&lt;/h2&gt;&#10;&lt;p&gt;The &lt;strong&gt;AND&lt;/strong&gt; and &lt;strong&gt;OR&lt;/strong&gt; operators have two forms: &lt;strong&gt;AND&lt;/strong&gt; ( &amp;amp;, &amp;amp;&amp;amp;),&#10;    &lt;strong&gt;OR&lt;/strong&gt; ( |, ||).&lt;/p&gt;&#10;&lt;p&gt;There are some differences:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;the &amp;amp; and | operators are also used as bitwise operators for integer types;&lt;/li&gt;&#10;    &lt;li&gt;the &amp;amp;&amp;amp; and || operator perform &lt;strong&gt;Conditional-AND &lt;/strong&gt;and &lt;strong&gt;Conditional-OR &lt;/strong&gt;operations&#10;        on two boolean expressions. These operators are called &lt;strong&gt;&quot;short-circuit&quot;&lt;/strong&gt; operators, which means&#10;        that the second operand is evaluated only when it is needed (when the first argument doesn't suffice to&#10;        determine the value of the expression).&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;In the following example, the second operand a&amp;gt;5 will not be evaluated because the result is determined by the&#10;    first operand (a==10 is &lt;strong&gt;false&lt;/strong&gt;):&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int a = 20;&#10;    boolean result = (a == 10) &amp;amp;&amp;amp; (a &amp;gt; 5); // the second expressions can't be evaluated&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;The precedence of logical operators&lt;/h2&gt;&#10;&lt;p&gt;Below the logical operations are sorted in order of their priority in expressions:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;! - NOT&lt;/li&gt;&#10;    &lt;li&gt;&amp;amp; - AND&lt;/li&gt;&#10;    &lt;li&gt;^ - XOR&lt;/li&gt;&#10;    &lt;li&gt;| - OR&lt;/li&gt;&#10;    &lt;li&gt;&amp;amp;&amp;amp; - conditional AND&lt;/li&gt;&#10;    &lt;li&gt;|| - conditional OR&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;So, the following statement is &lt;strong&gt;true&lt;/strong&gt;:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    boolean b = true &amp;amp;&amp;amp; !false; // true, because !false is evaluated first&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294266" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522230746000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="0, 1" />
                          <option value="false, true" />
                          <option value="none of these" />
                          <option value="no, yes" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;A &lt;strong&gt;boolean&lt;/strong&gt; value is either ... or ...&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294267" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522253161000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="b4 - false, b5 - true" />
                          <option value="b4 - true, b5 - false" />
                          <option value="b4 - true, b5 - true" />
                          <option value="b4 - false, b5 - false" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;Choose the right answer for the two expressions:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    boolean b1 = true;&#10;    boolean b2 = false;&#10;    boolean b3 = false;&#10;&#10;    boolean b4 = b1 ^ !b3 &amp;amp; b2;&#10;    boolean b5 = b1 ^ !b3 &amp;amp;&amp;amp; b2;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;Learning is a journey with a lot of experiment and investigation. Look under the hood of any code and see what's&#10;    going on with the help of the IntelliJ IDEA graphical &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.jetbrains.com/help/idea/debugger-basics.html&quot;&gt;debugger&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;Set a line breakpoint &lt;img alt=&quot;&quot; src=&quot;https://i.imgur.com/eOsuzVm.png&quot; height=&quot;20&quot;&gt; by clicking the left gutter area at a line where you want to stop, or by pressing Cmd + F8:&lt;/p&gt;&#10;&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;&quot; src=&quot;https://i.imgur.com/YbSRe8R.png&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;Now run the debugger with Ctrl + Shift + D:&lt;/p&gt;&#10;&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;&quot; src=&quot;https://i.imgur.com/wQKDglO.png&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;Your program will stop on the line with breakpoint:&lt;/p&gt;&#10;&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;&quot; src=&quot;https://i.imgur.com/YIXgZlf.png&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;Now use F8 to go step-by-step through your code and find all the information about what is happening in the Debug&#10;    tool window:&lt;/p&gt;&#10;&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;&quot; src=&quot;https://i.imgur.com/69kXeLV.png&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;You can also just hover over a code expression and see the evaluation result:&lt;/p&gt;&#10;&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;&quot; src=&quot;https://i.imgur.com/jfyb8ue.png&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;Or use Alt + F8 to open a special dialog where you can experiment with different code expressions while your program&#10;    is paused:&lt;/p&gt;&#10;&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;&quot; src=&quot;https://i.imgur.com/UtTZdvM.png&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294268" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522252725000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Relational operators&lt;/h1&gt;&#10;&lt;p&gt;A &lt;strong&gt;relational operator &lt;/strong&gt;tests or defines some kind of relation between two operands.&lt;/p&gt;&#10;&lt;p&gt;Java has six relational operators:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;== (equal to)&lt;/li&gt;&#10;    &lt;li&gt;!= (not equal to)&lt;/li&gt;&#10;    &lt;li&gt;&amp;gt; (greater than)&lt;/li&gt;&#10;    &lt;li&gt;&amp;gt;= (greater than or equal to)&lt;/li&gt;&#10;    &lt;li&gt;&amp;lt; (less than)&lt;/li&gt;&#10;    &lt;li&gt;&amp;lt;= (less than or equal to)&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;The result of applying a relational operator to operands is the boolean type (&lt;strong&gt;true&lt;/strong&gt; or&#10;    &lt;strong&gt;false&lt;/strong&gt;).&lt;/p&gt;&#10;&lt;p&gt;Operators == and != can be applied to operands of any primitive types, but operators &amp;gt;, &amp;gt;=, &amp;lt;, &amp;lt;= cannot&#10;    be applied to boolean operands.&lt;/p&gt;&#10;&lt;p&gt;In expressions, the relational operators have a lower priority than arithmetic operators.&lt;/p&gt;&#10;&lt;h2&gt;Comparing integer numbers&lt;/h2&gt;&#10;&lt;p&gt;Relational operators allow you to easily compare two integer numbers:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int num1 = 4;&#10;    int num2 = 2;&#10;&#10;    boolean b1 = num1 == num2; // false&#10;    boolean b2 = num1 &amp;gt; num2;  // true&#10;&#10;    boolean b3 = 500 != 500;   // false&#10;    boolean b4 = 300 &amp;lt;= 300;   // true&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;We can compare &lt;strong&gt;long&lt;/strong&gt;s, &lt;strong&gt;byte&lt;/strong&gt;s, and &lt;strong&gt;short&lt;/strong&gt;s in the same way.&lt;/p&gt;&#10;&lt;p&gt;In the following example, first, the sums will be calculated and then will be compared using the operator &amp;gt;:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    long number = 1000;&#10;    boolean result = number + 10 &amp;gt; number + 9; // 1010 &amp;gt; 1009 is true&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Comparing characters&lt;/h2&gt;&#10;&lt;p&gt;Characters are ordered, it's possible to compare two characters by their code values using any relational&#10;    operations.&lt;/p&gt;&#10;&lt;p&gt;Characters can be compared ( ==, !=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=) by their codes:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    System.out.println('a' &amp;lt; 'b');  // prints &quot;true&quot;&#10;    System.out.println('a' == 'a'); // prints &quot;true&quot;&#10;    System.out.println('e' &amp;lt; 'E');  // prints &quot;false&quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Comparing floating-point numbers&lt;/h2&gt;&#10;&lt;p&gt;During the operation with floating-point numbers, errors can be accumulated.&lt;/p&gt;&#10;&lt;p&gt;Do not use == or != when comparing floating-point numbers in Java. Instead, if you'd like to compare two&#10;    floating-point values a and b, use the standard way:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    Math.abs(a - b) &amp;lt; eps&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;It means the absolute value of the difference is less than a certain epsilon.&lt;/p&gt;&#10;&lt;p&gt;Here is an example why it's important:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    double val = 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1; // 0.99999...&#10;&#10;    System.out.println(val == 1.0); // it prints &quot;false&quot;&#10;    System.out.println(Math.abs(val - 1.0) &amp;lt; 1e-6); // it prints &quot;true&quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Joining relational operations using logical operators&lt;/h2&gt;&#10;&lt;p&gt;In Java, you cannot write an expression like this:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    a &amp;lt;= b &amp;lt;= c&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Instead, you should join two boolean expressions using logical operators like || and &amp;amp;&amp;amp;.&lt;/p&gt;&#10;&lt;p&gt;For example, we'd like to check the expression:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    100 &amp;lt; number &amp;lt; 200&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;In Java we should write something like this:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    number &amp;gt; 100 &amp;amp;&amp;amp; number &amp;lt; 200&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Also, we can write with parentheses:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    (number &amp;gt; 100) &amp;amp;&amp;amp; (number &amp;lt; 200)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;But parentheses are not necessary here because relational operators have the higher priority than logical&#10;    operators.&lt;/p&gt;&#10;&lt;p&gt;Here is a more general example of variables:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    //the code checks that the value of number belongs to a range&#10;    &#10;    int number = ...             // it has a value&#10;    int low = 100, high = 200;   // borders&#10;&#10;    boolean inRange = number &amp;gt; low &amp;amp;&amp;amp; number &amp;lt; high;  // join two expressions using AND&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;So, logical operators allow you to join a sequence of relational operations into one expression.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294270" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522232778000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="true" />
                          <option value="false" />
                          <option value="no" />
                          <option value="1" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;Choose the right answer for the &lt;i&gt;result&lt;/i&gt; variable:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int number = 990;&#10;    boolean result = number &amp;gt; 1000 || number % 10 == 0;&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294269" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522253098000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Olivia" />
                          <option value="Alexander" />
                          <option value="Andrew" />
                          <option value="Emily" />
                          <option value="John" />
                          <option value="Mary" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;You would like to offer Java developer jobs to several candidates. Select all the candidates to receive such offers&#10;    according to your company rules.&lt;/p&gt;&#10;&lt;p&gt;Your company has a special rule written in Java for decision-making:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    boolean offerAJob =&#10;       (knowJava &amp;amp;&amp;amp; yearsOfExperienceInJava &amp;gt;= 1) ||&#10;               (knowPython &amp;amp;&amp;amp; yearsOfExperienceInPython &amp;gt;= 3);&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;A small explanation&lt;/strong&gt;:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;i&gt;knowJava&lt;/i&gt; is a boolean variable that shows whether the candidate knows Java or not&lt;/li&gt;&#10;    &lt;li&gt;&lt;i&gt;knowPython&lt;/i&gt; is a boolean variable that shows whether the candidate knows Python or not&lt;/li&gt;&#10;    &lt;li&gt;&lt;i&gt;yearsOfExperienceInJava&lt;/i&gt; is an int variable that shows how many years of Java programming the candidate has&lt;/li&gt;&#10;    &lt;li&gt;&lt;i&gt;yearsOfExperienceInPython&lt;/i&gt; is another int variable that shows how many years of Python programming the candidate has&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&lt;strong&gt;The list of candidates with their skills&lt;/strong&gt;:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;John: &lt;i&gt;knowJava&lt;/i&gt; = true; &lt;i&gt;yearsOfExperienceInJava&lt;/i&gt; = 1; &lt;i&gt;knowPython&lt;/i&gt; = false; &lt;i&gt;yearsOfExperienceInPython&lt;/i&gt; = 0;&lt;/li&gt;&#10;    &lt;li&gt;Mary: &lt;i&gt;knowJava&lt;/i&gt; = false; &lt;i&gt;yearsOfExperienceInJava&lt;/i&gt; = 0; &lt;i&gt;knowPython&lt;/i&gt; = true; &lt;i&gt;yearsOfExperienceInPython&lt;/i&gt; = 3;&lt;/li&gt;&#10;    &lt;li&gt;Olivia: &lt;i&gt;knowJava&lt;/i&gt; = true; &lt;i&gt;yearsOfExperienceInJava&lt;/i&gt; = 0; &lt;i&gt;knowPython&lt;/i&gt; = true; &lt;i&gt;yearsOfExperienceInPython&lt;/i&gt; = 2;&lt;/li&gt;&#10;    &lt;li&gt;Alexander: &lt;i&gt;knowJava&lt;/i&gt; = true; &lt;i&gt;yearsOfExperienceInJava&lt;/i&gt; = 3; &lt;i&gt;knowPython&lt;/i&gt; = true; &lt;i&gt;yearsOfExperienceInPython&lt;/i&gt; = 2;&lt;/li&gt;&#10;    &lt;li&gt;Andrew: &lt;i&gt;knowJava&lt;/i&gt; = false; &lt;i&gt;yearsOfExperienceInJava&lt;/i&gt; = 1; &lt;i&gt;knowPython&lt;/i&gt; = false; &lt;i&gt;yearsOfExperienceInPython&lt;/i&gt; = 1;&lt;/li&gt;&#10;    &lt;li&gt;Emily: &lt;i&gt;knowJava&lt;/i&gt; = false; &lt;i&gt;yearsOfExperienceInJava&lt;/i&gt; = 0; &lt;i&gt;knowPython&lt;/i&gt; = true; &lt;i&gt;yearsOfExperienceInPython&lt;/i&gt; = 2;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Sometimes a candidate may have a programming language experience but only a limited&#10;    knowledge of a programming language, which means we may consider that there is no programming language at all.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (3)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294271" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522253124000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54728" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77877" />
                <option name="index" value="7" />
                <option name="name" value="Floating-point" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1522287099000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Single and double precision floating-point numbers&lt;/h1&gt;&#10;&lt;p&gt;There are two primitive floating point types: single-precision &lt;strong&gt;float&lt;/strong&gt; (32 bits) and double-precision&#10;    &lt;strong&gt;double&lt;/strong&gt; (64 bits).&lt;/p&gt;&#10;&lt;p&gt;Let's declare and initialize some variables of these types:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    double zero = 0.0;&#10;    double e = 2.71828;      // or 2.71828d&#10;    double eps = 5e-3;       // 5 * 10^(-3) = 0.0005&#10;&#10;    float pi = 3.1415f;      // the literal f is always needed&#10;    float negValue = -0.15f; // the negative value&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;These types can store only a limited number of significant decimal digits (~6-7 for float and ~14-16 for double):&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    float f = 0.888888888888888888f; // a value with a lot of decimal digits&#10;    System.out.println(f);           // it prints 0.8888889&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The following code lets you know the size, the min and the max value of the double type:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    System.out.println(Double.SIZE);      // 64 bits&#10;    System.out.println(Double.MIN_VALUE); // 4.9E-324&#10;    System.out.println(Double.MAX_VALUE); // 1.7976931348623157E308&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Arithmetic operations&lt;/h2&gt;&#10;&lt;p&gt;It's possible to perform all arithmetic operations with &lt;strong&gt;double&lt;/strong&gt; and &lt;strong&gt;float&lt;/strong&gt; numbers:&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;addition +&lt;/li&gt;&#10;    &lt;li&gt;subtraction -&lt;/li&gt;&#10;    &lt;li&gt;multiplication *&lt;/li&gt;&#10;    &lt;li&gt;integer division /&lt;/li&gt;&#10;    &lt;li&gt;remainder %&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    System.out.println(3.4 + 6.1); // prints 9.5&#10;    System.out.println(1.1 * 2.0); // prints 2.2&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;We can even increment and decrement the numbers.&lt;/p&gt;&#10;&lt;p&gt;But be careful, the operations with floating-point numbers can produce an inaccurate result:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    System.out.println(3.3 / 3); // prints 1.0999999999999999&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Errors can accumulate during computation:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    double val = 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1;&#10;    System.out.println(val); // it prints 0.9999999999999999&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294272" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522233670000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="double" />
                          <option value="char" />
                          <option value="float" />
                          <option value="long" />
                          <option value="int" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;Select all the primitive floating-point types in Java&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294277" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522287099000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Write a program that inputs the distance between the two cities in miles and the travel time by bus in hours, and outputs the average speed of the bus.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;100&lt;br&gt;2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;50.0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294273" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522233745000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given a positive real number X. Output its fractional part.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;17.9&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0.9&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294275" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522233792000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given a positive real number X. Output the first digit after the decimal point.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1.79&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;7&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294276" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522233825000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Write a program which reads a double value x and evaluates the result of $x^3 + x^2 + x + 1$&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Output data format&lt;/strong&gt;: The double result of the expression.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;22.5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;11920.375&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Programming (3)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294274" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522234059000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54729" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77878" />
                <option name="index" value="8" />
                <option name="name" value="Math" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1522236702000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;The standard class Math&lt;/h1&gt;&#10;&lt;p&gt;The standard class Math, contains a lot of methods for performing basic numeric operations including exponential,&#10;    modulus, trigonometric functions, finding the max/min of two numbers and so on.&lt;/p&gt;&#10;&lt;p&gt;The most common methods are listed below:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.abs(...)&lt;/strong&gt; returns the absolute value of its argument&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.sqrt(...)&lt;/strong&gt; returns the square root of its argument&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.cbrt(...)&lt;/strong&gt; returns the cube root of its argument&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.pow(..., ...)&lt;/strong&gt; returns the value of the first argument raised to the power of the second&#10;        argument&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.min(..., ...)&lt;/strong&gt; returns the smaller value of two arguments&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.max(..., ...)&lt;/strong&gt; returns the greater value of two arguments&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.toRadians(...)&lt;/strong&gt; converts an angle measured in degrees to an angle measured in radians&#10;        (approximately)&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.sin(...)&lt;/strong&gt; returns the trigonometric sin of the given angle in radians&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.cos(...)&lt;/strong&gt; returns the trigonometric cos of the given angle in radians&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.random()&lt;/strong&gt; returns a double value with a positive sign, greater than or equal to 0.0 and&#10;        less than 1.0&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.floor(...)&lt;/strong&gt; returns the largest double value that is less than or equal to its argument and&#10;        is equal to an integer&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.ceil(...)&lt;/strong&gt; returns the smallest double value that is greater than or equal to its argument&#10;        and is equal to an integer&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;More useful methods see in docs: &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html&lt;/a&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;Also this class has two useful constants:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.PI&lt;/strong&gt; - the ratio of the circumference of a circle to its diameter&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Math.E&lt;/strong&gt; - the base of the natural logarithm&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;&#10;&lt;p&gt;Let's look at examples of all the considered methods:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int abs = Math.abs(-10); // abs is 10&#10;    double dabs = Math.abs(-10.33); // dabs is 10.33&#10;&#10;    double sqrt = Math.sqrt(2); // sqrt is 1.4142...&#10;    double cbrt = Math.cbrt(27.0); // cbrt is 3.0&#10;&#10;    double square = Math.pow(5, 2); // the square of 5 is 25.0&#10;    double cube = Math.pow(2, 3); // the cube of 2 is 8.0&#10;&#10;    int min = Math.min(11, 81); // min is 11&#10;    int max = Math.max(20, 30); // max is 30&#10;&#10;    double grad = Math.toRadians(30); // grad is 0.5235...&#10;&#10;    double pi = Math.PI; // pi is 3.1415...&#10;    double sin = Math.sin(pi / 2); // sin is 1.0&#10;    double cos = Math.cos(pi); // cos90 is -1.0&#10;&#10;    double random = Math.random(); // a random value &amp;gt;= 0.0 and &amp;lt; 1.0&#10;&#10;    double floor = Math.floor(3.78); // floor is 3.0&#10;    double ceil = Math.ceil(4.15); // ceil is 5.0&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;The length of the hypotenuse&lt;/h2&gt;&#10;&lt;p&gt;Let's assume we have a right-angled triangle (one angle is 90 degree). We know the lengths of the two sides: a = 3&#10;    and b = 4.&lt;/p&gt;&#10;&lt;p&gt;To calculate the length of hypotenuse we can write the following code:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    double a = 3, b = 4;&#10;    double c = Math.hypot(a, b); // c is 5.0&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;As you can see, the Math class has a lot of methods for performing numeric calculations.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;Programming is much more about understanding and reading existing code than about writing new code. While learning,&#10;    it is also quite important to see your code as a whole and understand how it works.&lt;/p&gt;&#10;&lt;p&gt;When you use any variable, function, or method and need a tip on how it works, let the code speak for itself. Look at&#10;    the declaration with Cmd + Y:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YCaLuQs.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;Or press Cmd + B to navigate to the declaration of an entity; use it one more time on the declaration to see&#10;    the list of usages:&lt;/p&gt;&#10;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XNvFFlM.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294281" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522235611000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given two floating-point numbers: a and b.&#10;    Calculate and output the value of the expression $a^b$.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Use double variables for a and b.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Input data format&lt;/strong&gt;: Two floating-point numbers in one line.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Output data format&lt;/strong&gt;: The result of the expression.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2 3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;8.0&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2 1.02&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2.027918959580058&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294287" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522235775000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given the real numbers a, b, c, where a ≠ 0.&lt;/p&gt;&#10;&lt;p&gt;Solve the quadratic equation $ax^2 + bx + c = 0$ and output all of its roots.&lt;/p&gt;&#10;&lt;p&gt;It is guaranteed that the equation always has two roots.&lt;/p&gt;&#10;&lt;p&gt;Output the results roots in ascending order. Do not round or format them, the testing system does it automatically.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;-1&lt;br&gt;-2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;-1 2&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;-7.5&lt;br&gt;3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0.423966 7.07603&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294289" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522235875000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;Many years ago when Paul went to school, he did not like the Heron's formula to calculate the area of a triangle,&#10;    mainly because he considered it very complex. He decided to help all the other students in his school by writing and&#10;    distributing a program, which could calculate the area of a triangle by using the lengths of its three sides.&lt;/p&gt;&#10;&lt;p&gt;However, there was a problem: because Paul did not like the formula, he did not memorize it. Help him finish this act&#10;    of kindness and write the program, calculating the area of a triangle by the transferred length of its sides, in&#10;    accordance with the Heron's formula:&lt;/p&gt;&#10;&lt;p&gt;$$S=\sqrt{p(p−a)(p−b)(p−c)}$$&lt;/p&gt;&#10;&lt;p&gt;where $p=\dfrac{a+b+c}2$ – half-perimeter of the triangle.&lt;/p&gt;&#10;&lt;p&gt;On the input, the program has integers, and the output should be a real number corresponding to the area of the triangle.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;6.0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294288" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522236058000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given two 2D vectors. Find the angle (degrees) between them.&lt;/p&gt;&#10;&lt;p&gt;If you don't know how to find the angle, see here: &lt;a href=&quot;http://www.wikihow.com/Find-the-Angle-Between-Two-Vectors&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Input data format&lt;/strong&gt;: The first line contains two components of the first vector, the second line contains two components of the second vector. Components in a line are separated by a space.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Output data format&lt;/strong&gt;: One double value - an angle between two vectors. The result can have an error less than 1e-8.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 3&lt;br&gt;4 2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;45&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (3)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294290" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522236243000" />
                    </CodeTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;The binary format&lt;/h1&gt;&#10;&lt;p&gt;In most cases, computer numbers are represented in the binary format. In this format, each digit of a number can be 0&#10;    or 1. For example, the decimal value 15 is 1111 in the binary format.&lt;/p&gt;&#10;&lt;p&gt;If you are not already familiar with the binary number system, you can learn about it here: &lt;a href=&quot;http://www.purplemath.com/modules/numbbase.htm&quot;&gt;http://www.purplemath.com/modules/numbbase.htm&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;The Java language provides several operators for manipulating bits of integer numbers.&lt;/p&gt;&#10;&lt;h2&gt;Bitwise operators&lt;/h2&gt;&#10;&lt;p&gt;There are four bitwise operators: ~&lt;strong&gt; (bitwise NOT, inversion, complement)&lt;/strong&gt;, |&lt;strong&gt; (bitwise&#10;    OR)&lt;/strong&gt;, &amp;amp;&lt;strong&gt; (bitwise AND)&lt;/strong&gt; and ^&lt;strong&gt; (bitwise XOR)&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;~ is a unary operator that &lt;strong&gt;inverses&lt;/strong&gt; bits in the binary format of the number making every 0 a 1&#10;        and every 1 a 0. It also changes the sign bit of the value.&#10;    &lt;/li&gt;&#10;    &lt;li&gt;| is a binary operator that performs &lt;strong&gt;bitwise OR&lt;/strong&gt;: the result is that the digit is 1 if at least&#10;        one operand digit is 1, otherwise, it is 0;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&amp;amp; is a binary operator that performs &lt;strong&gt;bitwise AND&lt;/strong&gt;: the result is that the digit is 1 if both&#10;        operand digits are 1, otherwise, it is 0;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;^ is a binary operator that performs &lt;strong&gt;bitwise XOR&lt;/strong&gt;: the result is that the digit is 1 if exactly&#10;        one operand is 1, otherwise, it is 0&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;The listed operators can be applied to both &lt;strong&gt;integer&lt;/strong&gt; and &lt;strong&gt;boolean&lt;/strong&gt; operands. If both operands are &lt;strong&gt;integers&lt;/strong&gt; then bitwise&#10;    operations will be performed. If both operands are &lt;strong&gt;booleans&lt;/strong&gt;, they perform the corresponding logical operations&#10;    (except ~).&lt;/p&gt;&#10;&lt;p&gt;Let's assume we have two integer numbers: 15 and 10. The first number has the binary representation 1111, the second&#10;    one is 1010.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int first = 15;  // binary format 1111&#10;    int second = 10; // binary format 1010&#10;&#10;    int bitwiseAnd = first &amp;amp; second; // 1111 &amp;amp; 1010 = 1010, the result is 10&#10;    int bitwiseOr = first | second;  // 1111 | 1010 = ﻿1111, the result is 15&#10;    int bitwiseXor = first ^ second; // 1111 ^ 1010 = 0101, the result is 5&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Bit-shift operators&lt;/h2&gt;&#10;&lt;p&gt;In additional to the bitwise operators, Java also provides bit-shift operators which can be used to shift bits of an&#10;    integer number from one position to another.&lt;/p&gt;&#10;&lt;p&gt;There are three bit-shift operators:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&amp;lt;&amp;lt; is a signed bit-shift operator that shifts a bit pattern to the left by the distance specified in the&#10;        right operand. It fills the empty place with zeros;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&amp;gt;&amp;gt; is a signed bit-shift operator that shifts a bit pattern to the right by the distance specified in the&#10;        right operand. It fills the empty place with values of the sign bit.&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&amp;gt;&amp;gt;&amp;gt; is an unsigned bit-shift operator that shifts a bit pattern to the right by the distance specified&#10;        in the right operand. It is almost like &amp;gt;&amp;gt;, but shifted values are filled up with zeros. The result of the&#10;        &amp;gt;&amp;gt;&amp;gt; operator is always positive.&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;See the following example:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int val = 25;   // binary: 0001 1001, decimal: 25&#10;&#10;    val = val &amp;lt;&amp;lt; 1; // binary: 0011 0010, decimal: 50&#10;    val = val &amp;lt;&amp;lt; 2; // binary: 1100 1000, decimal: 200&#10;&#10;    int anotherVal = 14;   // binary: 1110, decimal: 14&#10;    anotherVal = anotherVal &amp;gt;&amp;gt; 1; // binary: 0111, decimal: 7&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;As you can see, the result of the left-shift operator &amp;lt;&amp;lt; is equivalent to the multiplication by two, and the&#10;    result of the right-shift operator is equivalent to the division by two.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294286" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522236640000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Practice&lt;/h1&gt;&#10;&lt;p&gt;You have been given a natural number N, which is not less than 10.&lt;/p&gt;&#10;&lt;p&gt;Output the result of XOR'ing the two last digits of this number.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;11&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;12&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Programming (4)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294291" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522236702000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54730" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77883" />
                <option name="index" value="9" />
                <option name="name" value="Character" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1528988540000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Characters&lt;/h1&gt;&#10;&lt;p&gt;&lt;strong&gt;Char&lt;/strong&gt; is a primitive type for storing and processing single 16-bit Unicode characters. A char literal&#10;    is a single character enclosed in single quote marks like: &lt;strong&gt;'A'&lt;/strong&gt;, &lt;strong&gt;'b'&lt;/strong&gt;,&#10;    &lt;strong&gt;'8'&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;p&gt;Some features of this data type:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;It has a minimum value of \&lt;strong&gt;'u0000'&lt;/strong&gt;and a maximum value of &lt;strong&gt;'\uffff'&lt;/strong&gt;;&lt;/li&gt;&#10;    &lt;li&gt;variables of this type can be used as 16-bit unsigned integer numbers in arithmetic operations (the range is [0,&#10;        65535]);&#10;    &lt;/li&gt;&#10;    &lt;li&gt;characters are ordered, it's possible to compare two character values.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;There are some examples of characters:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    char a = 'a';     // the 'a' character&#10;    char b = 'a' + 1; // the 'b' character&#10;    char d = 'b' + 2; // the 'd' character&#10;&#10;    char ch1 = 101;      // the 'e' character&#10;    char ch2 = '\u0040'; // the '@' character&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;If you'd like to find the code of a character, see &lt;a href=&quot;https://unicode-table.com/en/&quot; title=&quot;Link: https://unicode-table.com/en/&quot;&gt;the Unicode table&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;Remember:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    char ch1 = '1'; // the character '1'&#10;    char ch2 = 1;   // it's another character from the unicode table, it’s not the same as '1'&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Escape sequences&lt;/h2&gt;&#10;&lt;p&gt;Some characters are used to control computer devices. They are known as the escape sequences or control sequences.&#10;    They consists of more than one element, but they are considered as a single character.&lt;/p&gt;&#10;&lt;p&gt;The most widely used escape sequences:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;strong&gt;'\n'&lt;/strong&gt; is the newline character;&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;'\t'&lt;/strong&gt; is the tab character;&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;'\r'&lt;/strong&gt; is the carriage return character;&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;'\\'&lt;/strong&gt; is the backslash character;&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;'\''&lt;/strong&gt; is the single quote mark;&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;'\&quot;'&lt;/strong&gt; is the double quote mark.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;See the following code example:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    System.out.print('\t'); // make a tab&#10;    System.out.print('a');  // prints 'a'&#10;    System.out.print('\n'); // go to the new line&#10;    System.out.print('c');  // prints 'c'&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The output:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;&#9;a&#10;c&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Arithmetic operations&lt;/h2&gt;&#10;&lt;p&gt;All five arithmetic operations ( +, -, *, /, %) are admissible for characters. These operations are performed on the&#10;    codes of the characters:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    char b = 'a' + 1;    // in the unicode table the next after 'a' is 'b'&#10;    char zero = 48;      // '0'&#10;    char one = '0' + 1;  // in the unicode table the next after '0' is '1'&#10;    char ch = '1' + '2'; // the result is 'c', not '3' because the operation sums codes&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Methods for processing characters&lt;/h2&gt;&#10;&lt;p&gt;The class &lt;strong&gt;Character&lt;/strong&gt; has some useful methods for processing characters. Some of them are given below:&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;strong&gt;Character.isDigit(char ch)&lt;/strong&gt; returns true if the given character is a digit ('1', '2', etc),&#10;        otherwise - false;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Character.isLetter(char ch)&lt;/strong&gt; returns true if the given character is a letter (a', 'A', 'b',&#10;        etc), otherwise - false;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Character.isLetterOrDigit(char ch) &lt;/strong&gt;returns true if the given character is a letter or a digit,&#10;        otherwise - false;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Character.isWhitespace(char ch)&lt;/strong&gt; returns true if the given character is the white space,&#10;        otherwise - false;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Character.isUpperCase(char ch)&lt;/strong&gt; returns true if the given character is an uppercase character,&#10;        otherwise - false;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Character.isLowerCase(char ch)&lt;/strong&gt; returns true if the given character is an lowercase character,&#10;        otherwise - false;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Character.toUpperCase(char ch)&lt;/strong&gt; returns the uppercase form of the given character;&lt;/li&gt;&#10;    &lt;li&gt;&lt;strong&gt;Character.toLowerCase(char ch)&lt;/strong&gt; returns the lowercase form of the given character.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Let's see an examples for the listed methods:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    boolean isDigit = Character.isDigit('1');   // true&#10;    boolean isLetter = Character.isLetter('4'); // false&#10;&#10;    boolean isLetterOfDigit = Character.isLetterOrDigit('E'); // true&#10;&#10;    boolean isUpperCase = Character.isUpperCase('A'); // true&#10;    boolean isLowerCase = Character.isLowerCase('1'); // false&#10;&#10;    char upperCaseA = Character.toUpperCase('a');&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;span&gt;The class contains many other methods, &lt;/span&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/lang/Character.html&quot;&gt;see&#10;    here&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294294" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1528988539000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="-90" />
                          <option value="65" />
                          <option value="an exception will happen" />
                          <option value="A" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;What will be the value of ch when displayed on the screen?&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    char ch = 65;&#10;    System.out.println(ch);&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294299" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522285517000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="it cannot be compiled" />
                          <option value="this code displays two identical values" />
                          <option value="this code displays two different values" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;What can you say about the following piece of code?&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    char c1 = 'A' + 32;&#10;    int c2 = 'A' + 32;&#10;&#10;    System.out.println(c1);&#10;    System.out.println(c2);&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294298" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522285551000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54735" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77887" />
                <option name="index" value="10" />
                <option name="name" value="Type Casting" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1522286565000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Type casting&lt;/h1&gt;&#10;&lt;p&gt;There are two kinds of casting of primitive types:&lt;strong&gt; implicit&lt;/strong&gt; and &lt;strong&gt;explicit&lt;/strong&gt;. The first&#10;    kind is performed automatically by the Java compiler, the second type - only by a programmer.&lt;/p&gt;&#10;&lt;h2&gt;Implicit casting&lt;/h2&gt;&#10;&lt;p&gt;The compiler automatically performs casting when the target type is wider than source type:&lt;/p&gt;&#10;&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;&quot; src=&quot;https://i.imgur.com/htCwv4t.png&quot;&gt;&lt;/p&gt;&#10;&lt;p&gt;There is no loss of information because the target type is wider than the source type.&lt;/p&gt;&#10;&lt;p&gt;Examples:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    int intVal = 8;&#10;    long longVal = intVal + 1;  // implicit casting from int to long&#10;    double doubleVal = longVal; // implicit casting from long to double&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Explicit casting&lt;/h2&gt;&#10;&lt;p&gt;The explicit casting is performed by a programmer when the target type is narrower than the source type. This kind of&#10;    casting may lose information about the overall magnitude of a numeric value and may also lose precision. Sometimes&#10;    this can be the desired behavior.&lt;/p&gt;&#10;&lt;p&gt;Any type casting not presented in the picture above requires explicit casting, for example: &lt;strong&gt;double -&amp;gt;&#10;    int&lt;/strong&gt;, &lt;strong&gt;long -&amp;gt; char&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;p&gt;Examples:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    double d = 2.00003;&#10;    long l =  (long) d; // it loses the fractional part&#10;    int i = (int) l;    // explicit type casting required&#10;    int val = (int) (1 + 2L + 3); // requires explicit casting because the result is long&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;When performing explicit casting, type overflow is possible. It is a situation when a value is too large to be&#10;    written to a type:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    long maxLong = Long.MAX_VALUE;&#10;    int overflow = (int) maxLong; // int variable can't store this value, the result is -1&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;More information can be found in &lt;a rel=&quot;nofollow&quot; href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.1&quot;&gt;Java&#10;    SE Specification&lt;/a&gt;.&lt;/p&gt;&#10;&lt;h2&gt;IDE tips &amp;amp; tricks&lt;/h2&gt;&#10;&lt;p&gt;IntelliJ IDEA helps make you aware of type incompatibility and when explicit casting is needed; with error&#10;    highlighting and intention actions:&lt;/p&gt;&#10;&lt;p&gt;&lt;img width=&quot;400&quot; alt=&quot;&quot; src=&quot;https://i.imgur.com/RE4MK6S.png&quot;&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294300" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522286525000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="(1)" />
                          <option value="(2)" />
                          <option value="(3)" />
                          <option value="(4)" />
                          <option value="(5)" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h1&gt;Quiz&lt;/h1&gt;&#10;&lt;p&gt;Select all lines where explicit casting is required:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&#10;    long l = Integer.MAX_VALUE; // (1)&#10;    int i = l; // (2)&#10;    char ch = i; // (3)&#10;    double d = ch; // (4)&#10;    float f = d; // (5)&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294301" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1522286564000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54739" />
              </Lesson>
            </list>
          </option>
        </RemoteCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>